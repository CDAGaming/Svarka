--- ../src-base/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
+++ ../src-work/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
@@ -23,14 +23,27 @@
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.IChunkGenerator;
 import net.minecraft.world.chunk.IChunkProvider;
+import net.minecraft.world.chunk.storage.AnvilChunkLoader;
 import net.minecraft.world.chunk.storage.IChunkLoader;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
+import org.bukkit.event.world.ChunkLoadEvent;
+
+// CraftBukkit start
+import org.bukkit.Server;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
+import org.bukkit.event.world.ChunkLoadEvent;
+import org.bukkit.event.world.ChunkUnloadEvent;
+// CraftBukkit end
+
 public class ChunkProviderServer implements IChunkProvider
 {
     private static final Logger field_147417_b = LogManager.getLogger();
-    private final Set<Long> field_73248_b = Sets.<Long>newHashSet();
+    public final Set<Long> field_73248_b = Sets.<Long>newHashSet();
     public final IChunkGenerator field_186029_c;
     public final IChunkLoader field_73247_e;
     public final Long2ObjectMap<Chunk> field_73244_f = new Long2ObjectOpenHashMap(8192);
@@ -125,7 +138,44 @@
 
         return chunk;
     }
+    
+    public Chunk getChunkIfLoaded(int x, int z) {
+        return (Chunk)this.field_73244_f.get(ChunkPos.func_77272_a(x, z));
+     }
 
+     public Chunk provideChunk2(int i, int j) {
+        return this.getChunkAt(i, j, (Runnable)null);
+     }
+
+     public Chunk getChunkAt(int i, int j, Runnable runnable) {
+        return this.getChunkAt(i, j, runnable, true);
+     }
+
+     public Chunk getChunkAt(int i, int j, Runnable runnable, boolean generate) {
+        Chunk chunk = this.getChunkIfLoaded(i, j);
+        AnvilChunkLoader loader = null;
+        if(this.field_73247_e instanceof AnvilChunkLoader) {
+           loader = (AnvilChunkLoader)this.field_73247_e;
+        }
+
+        if(chunk == null && loader != null && loader.chunkExists(this.field_73251_h, i, j)) {
+           if(runnable != null) {
+              ChunkIOExecutor.queueChunkLoad(this.field_73251_h, loader, this, i, j, runnable);
+              return null;
+           }
+
+           chunk = ChunkIOExecutor.syncChunkLoad(this.field_73251_h, loader, this, i, j);
+        } else if(chunk == null && generate) {
+           chunk = this.originalGetChunkAt(i, j);
+        }
+
+        if(runnable != null) {
+           runnable.run();
+        }
+
+        return chunk;
+     }
+
     public Chunk originalLoadChunk(int p_186025_1_, int p_186025_2_)
     {
         Chunk chunk = this.func_186026_b(p_186025_1_, p_186025_2_);
@@ -184,7 +234,50 @@
 
         return chunk;
     }
+    
+    public Chunk originalGetChunkAt(int i, int j) {
+        Chunk chunk = this.func_186026_b(i, j);
+        boolean newChunk = false;
+        if(chunk == null) {
+           long k = ChunkPos.func_77272_a(i, j);
 
+           try {
+              chunk = this.field_186029_c.func_185932_a(i, j);
+           } catch (Throwable var11) {
+              CrashReport x = CrashReport.func_85055_a(var11, "Exception generating new chunk");
+              CrashReportCategory z = x.func_85058_a("Chunk to be generated");
+              z.func_71507_a("Location", String.format("%d,%d", new Object[]{Integer.valueOf(i), Integer.valueOf(j)}));
+              z.func_71507_a("Position hash", Long.valueOf(k));
+              z.func_71507_a("Generator", this.field_186029_c);
+              throw new ReportedException(x);
+           }
+
+           newChunk = true;
+           this.field_73244_f.put(k, chunk);
+           chunk.func_76631_c();
+           CraftServer server = this.field_73251_h.getServer();
+           if(server != null) {
+              server.getPluginManager().callEvent(new ChunkLoadEvent(chunk.bukkitChunk, newChunk));
+           }
+
+           for(int var12 = -2; var12 < 3; ++var12) {
+              for(int var13 = -2; var13 < 3; ++var13) {
+                 if(var12 != 0 || var13 != 0) {
+                    Chunk neighbor = this.getChunkIfLoaded(chunk.field_76635_g + var12, chunk.field_76647_h + var13);
+                    if(neighbor != null) {
+                       neighbor.setNeighborLoaded(-var12, -var13);
+                       chunk.setNeighborLoaded(var12, var13);
+                    }
+                 }
+              }
+           }
+
+           chunk.func_186030_a(this, this.field_186029_c);
+        }
+
+        return chunk;
+     }
+
     @Nullable
     private Chunk func_73239_e(int p_73239_1_, int p_73239_2_)
     {
@@ -207,7 +300,7 @@
         }
     }
 
-    private void func_73243_a(Chunk p_73243_1_)
+    public void func_73243_a(Chunk p_73243_1_)
     {
         try
         {
@@ -219,7 +312,7 @@
         }
     }
 
-    private void func_73242_b(Chunk p_73242_1_)
+    public void func_73242_b(Chunk p_73242_1_)
     {
         try
         {
