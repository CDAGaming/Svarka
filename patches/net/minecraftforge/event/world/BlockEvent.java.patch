--- ../src-base/minecraft/net/minecraftforge/event/world/BlockEvent.java
+++ ../src-work/minecraft/net/minecraftforge/event/world/BlockEvent.java
@@ -27,7 +27,6 @@
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Enchantments;
 import net.minecraft.item.ItemStack;
-import net.minecraft.util.EnumHand;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.world.World;
@@ -35,13 +34,9 @@
 import net.minecraftforge.common.util.BlockSnapshot;
 import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraftforge.fml.common.eventhandler.Event;
-import net.minecraftforge.fml.common.eventhandler.Event.HasResult;
-import net.minecraftforge.fml.common.eventhandler.Event.Result;
 
 import com.google.common.collect.ImmutableList;
 
-import javax.annotation.Nullable;
-
 public class BlockEvent extends Event
 {
     private static final boolean DEBUG = Boolean.parseBoolean(System.getProperty("forge.debugBlockEvent", "false"));
@@ -175,36 +170,26 @@
         private final BlockSnapshot blockSnapshot;
         private final IBlockState placedBlock;
         private final IBlockState placedAgainst;
-        private final EnumHand hand;
 
-        @Deprecated
         public PlaceEvent(BlockSnapshot blockSnapshot, IBlockState placedAgainst, EntityPlayer player)
         {
-            this(blockSnapshot, placedAgainst, player, null);
-        }
-
-        public PlaceEvent(BlockSnapshot blockSnapshot, IBlockState placedAgainst, EntityPlayer player, @Nullable EnumHand hand) {
             super(blockSnapshot.getWorld(), blockSnapshot.getPos(), blockSnapshot.getCurrentBlock());
             this.player = player;
-            this.itemInHand = player.getHeldItem(hand != null ? hand : EnumHand.MAIN_HAND);
+            this.itemInHand = player.getHeldItemMainhand();
             this.blockSnapshot = blockSnapshot;
             this.placedBlock = blockSnapshot.getCurrentBlock();
             this.placedAgainst = placedAgainst;
-            this.hand = hand;
             if (DEBUG)
             {
-                System.out.printf("Created PlaceEvent - [PlacedBlock: %s ][PlacedAgainst: %s ][ItemStack: %s ][Player: %s ][Hand: %s]\n", getPlacedBlock(), placedAgainst, getItemInHand(), player, hand);
+                System.out.printf("Created PlaceEvent - [PlacedBlock: %s ][PlacedAgainst: %s ][ItemStack: %s ][Player: %s ]\n", getPlacedBlock(), placedAgainst, getItemInHand(), player);
             }
         }
 
         public EntityPlayer getPlayer() { return player; }
-        @Nullable
         public ItemStack getItemInHand() { return itemInHand; }
         public BlockSnapshot getBlockSnapshot() { return blockSnapshot; }
         public IBlockState getPlacedBlock() { return placedBlock; }
         public IBlockState getPlacedAgainst() { return placedAgainst; }
-        @Nullable
-        public EnumHand getHand() { return hand; }
     }
 
     /**
@@ -219,14 +204,9 @@
     {
         private final List<BlockSnapshot> blockSnapshots;
 
-        @Deprecated
         public MultiPlaceEvent(List<BlockSnapshot> blockSnapshots, IBlockState placedAgainst, EntityPlayer player)
         {
-            this(blockSnapshots, placedAgainst, player, null);
-        }
-
-        public MultiPlaceEvent(List<BlockSnapshot> blockSnapshots, IBlockState placedAgainst, EntityPlayer player, @Nullable EnumHand hand) {
-            super(blockSnapshots.get(0), placedAgainst, player, hand);
+            super(blockSnapshots.get(0), placedAgainst, player);
             this.blockSnapshots = ImmutableList.copyOf(blockSnapshots);
             if (DEBUG)
             {
@@ -287,60 +267,5 @@
             super(world, pos, state);
         }
     }
-    
-    /**
-     * Fired when a crop block grows.  See subevents.
-     *
-     */
-    public static class CropGrowEvent extends BlockEvent
-    {
-        public CropGrowEvent(World world, BlockPos pos, IBlockState state)
-        {
-            super(world, pos, state);
-        }
 
-        /**
-         * Fired when any "growing age" blocks (for example cacti, chorus plants, or crops
-         * in vanilla) attempt to advance to the next growth age state during a random tick.<br>
-         * <br>
-         * {@link Result#DEFAULT} will pass on to the vanilla growth mechanics.<br>
-         * {@link Result#ALLOW} will force the plant to advance a growth stage.<br>
-         * {@link Result#DENY} will prevent the plant from advancing a growth stage.<br>
-         * <br>
-         * This event is not {@link Cancelable}.<br>
-         * <br>
-         */
-        @HasResult
-        public static class Pre extends CropGrowEvent
-        {
-            public Pre(World world, BlockPos pos, IBlockState state)
-            {
-                super(world, pos, state);
-            }
-        }
-
-        /**
-         * Fired when "growing age" blocks (for example cacti, chorus plants, or crops
-         * in vanilla) have successfully grown. The block's original state is available,
-         * in addition to its new state.<br>
-         * <br>
-         * This event is not {@link Cancelable}.<br>
-         * <br>
-         * This event does not have a result. {@link HasResult}<br>
-         */
-        public static class Post extends CropGrowEvent
-        {
-            private final IBlockState originalState;
-            public Post(World world, BlockPos pos, IBlockState original, IBlockState state)
-            {
-                super(world, pos, state);
-                originalState = original;
-            }
-
-            public IBlockState getOriginalState()
-            {
-                return originalState;
-            }
-        }
-    }
 }
