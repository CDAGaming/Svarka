--- ../src-base/minecraft/net/minecraft/world/World.java
+++ ../src-work/minecraft/net/minecraft/world/World.java
@@ -4,6 +4,8 @@
 import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
+
+import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Collection;
 import java.util.Iterator;
@@ -52,6 +54,7 @@
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.IChunkProvider;
 import net.minecraft.world.gen.structure.StructureBoundingBox;
+import net.minecraft.world.gen.ChunkProviderServer;
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.MapStorage;
 import net.minecraft.world.storage.WorldInfo;
@@ -59,6 +62,29 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import org.bukkit.Bukkit;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.generator.ChunkGenerator;
+
+// CraftBukkit start
+import com.google.common.collect.Maps;
+import java.util.Map;
+import org.bukkit.Bukkit;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.event.block.BlockCanBuildEvent;
+import org.bukkit.event.block.BlockPhysicsEvent;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+import org.bukkit.generator.ChunkGenerator;
+// CraftBukkit end
+
 public abstract class World implements IBlockAccess
 {
     /**
@@ -89,22 +115,22 @@
     public float field_73017_q;
     private int field_73016_r;
     public final Random field_73012_v = new Random();
-    public final WorldProvider field_73011_w;
+    public WorldProvider field_73011_w;
     protected PathWorldListener field_184152_t = new PathWorldListener();
     protected List<IWorldEventListener> field_73021_x;
     protected IChunkProvider field_73020_y;
     protected final ISaveHandler field_73019_z;
-    protected WorldInfo field_72986_A;
+    public WorldInfo field_72986_A;
     protected boolean field_72987_B;
-    protected MapStorage field_72988_C;
+    public MapStorage field_72988_C;
     public VillageCollection field_72982_D;
     protected LootTableManager field_184151_B;
     public final Profiler field_72984_F;
     private final Calendar field_83016_L;
-    protected Scoreboard field_96442_D;
+    public Scoreboard field_96442_D;
     public final boolean field_72995_K;
-    protected boolean field_72985_G;
-    protected boolean field_72992_H;
+    public boolean field_72985_G;
+    public boolean field_72992_H;
     private boolean field_147481_N;
     private final WorldBorder field_175728_M;
     int[] field_72994_J;
@@ -113,22 +139,89 @@
     public boolean captureBlockSnapshots = false;
     public java.util.ArrayList<net.minecraftforge.common.util.BlockSnapshot> capturedBlockSnapshots = new java.util.ArrayList<net.minecraftforge.common.util.BlockSnapshot>();
 
-    protected World(ISaveHandler p_i45749_1_, WorldInfo p_i45749_2_, WorldProvider p_i45749_3_, Profiler p_i45749_4_, boolean p_i45749_5_)
+    // CraftBukkit start Added the following
+    protected CraftWorld world;
+    public boolean pvpMode;
+    public boolean keepSpawnInMemory = true;
+    public ChunkGenerator generator;
+    public boolean captureBlockStates = false;
+    public boolean captureTreeGeneration = false;
+    
+    public ArrayList<BlockState> capturedBlockStates= new ArrayList<BlockState>(){
+    	@Override
+    	public boolean add( BlockState blockState ) {
+    		Iterator<BlockState> blockStateIterator = this.iterator();
+    		while( blockStateIterator.hasNext() ) {
+    			BlockState blockState1 = blockStateIterator.next();
+    			if ( blockState1.getLocation().equals( blockState.getLocation() ) ) {
+    				return false;
+    			}
+    		}
+    		
+    		return super.add( blockState );
+    	}
+    };
+    public long ticksPerAnimalSpawns;
+    public long ticksPerMonsterSpawns;
+    public boolean populating;
+    private int tickPosition;
+    
+    public CraftWorld getWorld() {
+    	return this.world;
+    }
+    
+    public CraftServer getServer() {
+    	return (CraftServer) Bukkit.getServer();
+    }
+    
+    public Chunk getChunkIfLoaded(int x, int z) {
+    	return ((ChunkProviderServer) this.field_73020_y).getChunkIfLoaded(x, z);
+    }
+    
+    protected World(ISaveHandler saveHandlerIn, WorldInfo info, WorldProvider providerIn, Profiler profilerIn, boolean client, ChunkGenerator gen, org.bukkit.World.Environment env)
     {
+    	//this(saveHandlerIn, info, providerIn, profilerIn, client);
+    	this.generator = gen;
+    	this.world = new CraftWorld((WorldServer) this, gen, env);
+    	//this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit TODO!!!
+    	//this.ticksPerMonsterSpawns = this.getServer().getTicksPerMonsterSpawns(); // CraftBukkit TODO!!!
+    	// CraftBukkit end
         this.field_73021_x = Lists.newArrayList(new IWorldEventListener[] {this.field_184152_t});
         this.field_83016_L = Calendar.getInstance();
         this.field_96442_D = new Scoreboard();
         this.field_72985_G = true;
         this.field_72992_H = true;
         this.field_72994_J = new int[32768];
-        this.field_73019_z = p_i45749_1_;
-        this.field_72984_F = p_i45749_4_;
-        this.field_72986_A = p_i45749_2_;
-        this.field_73011_w = p_i45749_3_;
-        this.field_72995_K = p_i45749_5_;
-        this.field_175728_M = p_i45749_3_.func_177501_r();
+        this.field_73019_z = saveHandlerIn;
+        this.field_72984_F = profilerIn;
+        this.field_72986_A = info;
+        this.field_73011_w = providerIn;
+        this.field_72995_K = client;
+        this.field_175728_M = providerIn.func_177501_r();
         perWorldStorage = new MapStorage((ISaveHandler)null);
+        
+        this.getServer().addWorld(this.world); // Craftbukkit
     }
+    
+    /*protected World(ISaveHandler saveHandlerIn, WorldInfo info, WorldProvider providerIn, Profiler profilerIn, boolean client) // Svarka
+    {
+    	//this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit TODO!!
+    	//this.ticksPerMonsterSpawns = this.getServer().getTicksPerMonsterSpawns(); // CraftBukkit
+    	// CraftBukkit end
+        this.eventListeners = Lists.newArrayList(new IWorldEventListener[] {this.pathListener});
+        this.theCalendar = Calendar.getInstance();
+        this.worldScoreboard = new Scoreboard();
+        this.spawnHostileMobs = true;
+        this.spawnPeacefulMobs = true;
+        this.lightUpdateBlockList = new int[32768];
+        this.saveHandler = saveHandlerIn;
+        this.theProfiler = profilerIn;
+        this.worldInfo = info;
+        this.provider = providerIn;
+        this.isRemote = client;
+        this.worldBorder = providerIn.createWorldBorder();
+        perWorldStorage = new MapStorage((ISaveHandler)null);
+    }*/
 
     public World func_175643_b()
     {
@@ -350,6 +443,21 @@
             }
         }
     }
+    
+    // CraftBukkit start - Split off from original setTypeAndData(int i, int j, int k, Block block, int l, int i1) method in order to directly send client and physic updates
+    public void notifyAndUpdatePhysics(BlockPos blockposition, Chunk chunk, IBlockState oldBlock, IBlockState newBlock, int flag) {
+    	if ((flag & 2) != 0 && (chunk == null || chunk.func_150802_k())) {  // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement
+    		this.func_184138_a(blockposition, oldBlock, newBlock, flag);
+    	}
+    	
+    	if (!this.field_72995_K && (flag & 1) != 0) {
+    		this.func_175722_b(blockposition, oldBlock.func_177230_c());
+    		if (newBlock.func_185912_n()) {
+    			this.func_175666_e(blockposition, newBlock.func_177230_c());
+    		}
+    	}
+    }
+    // CraftBukkit end
 
     // Split off from original setBlockState(BlockPos, IBlockState, int) method in order to directly send client and physic updates
     public void markAndNotifyBlock(BlockPos p_180501_1_, Chunk chunk, IBlockState iblockstate, IBlockState p_180501_2_, int p_180501_3_)
@@ -1094,14 +1202,22 @@
 
     public boolean func_72838_d(Entity p_72838_1_)
     {
+    	// CraftBukkit start - Used for entities other than creatures
+    	return this.spawnEntityInWorld(p_72838_1_, CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+    
+    public boolean spawnEntityInWorld(Entity entityIn, CreatureSpawnEvent.SpawnReason spawnReason)
+    {
+    	if (entityIn == null) return false;
+    	// CraftBukkit end
         // do not drop any items while restoring blocksnapshots. Prevents dupes
-        if (!this.field_72995_K && (p_72838_1_ == null || (p_72838_1_ instanceof net.minecraft.entity.item.EntityItem && this.restoringBlockSnapshots))) return false;
+        if (!this.field_72995_K && (entityIn == null || (entityIn instanceof net.minecraft.entity.item.EntityItem && this.restoringBlockSnapshots))) return false;
 
-        int i = MathHelper.func_76128_c(p_72838_1_.field_70165_t / 16.0D);
-        int j = MathHelper.func_76128_c(p_72838_1_.field_70161_v / 16.0D);
-        boolean flag = p_72838_1_.field_98038_p;
+        int i = MathHelper.func_76128_c(entityIn.field_70165_t / 16.0D);
+        int j = MathHelper.func_76128_c(entityIn.field_70161_v / 16.0D);
+        boolean flag = entityIn.field_98038_p;
 
-        if (p_72838_1_ instanceof EntityPlayer)
+        if (entityIn instanceof EntityPlayer)
         {
             flag = true;
         }
@@ -1112,18 +1228,18 @@
         }
         else
         {
-            if (p_72838_1_ instanceof EntityPlayer)
+            if (entityIn instanceof EntityPlayer)
             {
-                EntityPlayer entityplayer = (EntityPlayer)p_72838_1_;
+                EntityPlayer entityplayer = (EntityPlayer)entityIn;
                 this.field_73010_i.add(entityplayer);
                 this.func_72854_c();
             }
 
-            if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(p_72838_1_, this)) && !flag) return false;
+            if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(entityIn, this)) && !flag) return false;
 
-            this.func_72964_e(i, j).func_76612_a(p_72838_1_);
-            this.field_72996_f.add(p_72838_1_);
-            this.func_72923_a(p_72838_1_);
+            this.func_72964_e(i, j).func_76612_a(entityIn);
+            this.field_72996_f.add(entityIn);
+            this.func_72923_a(entityIn);
             return true;
         }
     }
