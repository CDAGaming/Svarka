--- ../src-base/minecraft/net/minecraft/tileentity/CommandBlockBaseLogic.java
+++ ../src-work/minecraft/net/minecraft/tileentity/CommandBlockBaseLogic.java
@@ -1,16 +1,22 @@
 package net.minecraft.tileentity;
 
 import io.netty.buffer.ByteBuf;
+
 import java.text.SimpleDateFormat;
 import java.util.Date;
+
 import javax.annotation.Nullable;
+
 import net.minecraft.command.CommandResultStats;
+import net.minecraft.command.EntitySelector;
 import net.minecraft.command.ICommandManager;
 import net.minecraft.command.ICommandSender;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
+import net.minecraft.entity.item.EntityMinecartCommandBlock;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.ReportedException;
@@ -20,6 +26,24 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+
+
+
+import com.google.common.base.Joiner;
+import java.util.ArrayList;
+import java.util.logging.Level;
+import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
+
+//CraftBukkit start
+import java.util.ArrayList;
+
+import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
+
+import com.google.common.base.Joiner;
+
+import java.util.logging.Level;
+// CraftBukkit end
+
 public abstract class CommandBlockBaseLogic implements ICommandSender
 {
     private static final SimpleDateFormat field_145766_a = new SimpleDateFormat("HH:mm:ss");
@@ -29,6 +53,7 @@
     private String field_145763_e = "";
     private String field_145761_f = "@";
     private final CommandResultStats field_175575_g = new CommandResultStats();
+    public org.bukkit.command.CommandSender sender; // CraftBukkit - add sender
 
     public int func_145760_g()
     {
@@ -133,7 +158,7 @@
                 try
                 {
                     this.field_145762_d = null;
-                    this.field_145764_b = icommandmanager.func_71556_a(this, this.field_145763_e);
+                    this.field_145764_b = executeCommand(this, sender, this.field_145763_e); // Craftbukkit
                 }
                 catch (Throwable throwable)
                 {
@@ -162,7 +187,124 @@
             }
         }
     }
+    
+	// CraftBukkit start
+	public static int executeCommand(ICommandSender sender, org.bukkit.command.CommandSender bSender, String command) {
+		org.bukkit.command.SimpleCommandMap commandMap = sender.func_130014_f_().getServer().getCommandMap();
+		Joiner joiner = Joiner.on(" ");
+		if (command.startsWith("/")) {
+			command = command.substring(1);
+		}
+		String[] args = command.split(" ");
+		ArrayList<String[]> commands = new ArrayList<String[]>();
 
+		String cmd = args[0];
+		if (cmd.startsWith("minecraft:"))
+			cmd = cmd.substring("minecraft:".length());
+		if (cmd.startsWith("bukkit:"))
+			cmd = cmd.substring("bukkit:".length());
+
+		// Block disallowed commands
+		if (cmd.equalsIgnoreCase("stop") || cmd.equalsIgnoreCase("kick") || cmd.equalsIgnoreCase("op") || cmd.equalsIgnoreCase("deop") || cmd.equalsIgnoreCase("ban") || cmd.equalsIgnoreCase("ban-ip") || cmd.equalsIgnoreCase("pardon") || cmd.equalsIgnoreCase("pardon-ip") || cmd.equalsIgnoreCase("reload")) {
+			return 0;
+		}
+
+		// Handle vanilla commands;
+		org.bukkit.command.Command commandBlockCommand = commandMap.getCommand(args[0]);
+		if (sender.func_130014_f_().getServer().getCommandBlockOverride(args[0])) {
+			commandBlockCommand = commandMap.getCommand("minecraft:" + args[0]);
+		}
+		if (commandBlockCommand instanceof VanillaCommandWrapper) {
+			command = command.trim();
+			if (command.startsWith("/")) {
+				command = command.substring(1);
+			}
+			String as[] = command.split(" ");
+			as = VanillaCommandWrapper.dropFirstArgument(as);
+			if (!((VanillaCommandWrapper) commandBlockCommand).testPermission(bSender)) {
+				return 0;
+			}
+			return ((VanillaCommandWrapper) commandBlockCommand).dispatchVanillaCommand(bSender, sender, as);
+		}
+
+		// Make sure this is a valid command
+		if (commandMap.getCommand(args[0]) == null) {
+			return 0;
+		}
+
+		commands.add(args);
+
+		// Find positions of command block syntax, if any
+		/*
+		 * WorldServer[] prev = MinecraftServer.getServer().worldServer;
+		 * MinecraftServer server = MinecraftServer.getServer();
+		 * server.worldServer = new WorldServer[server.worlds.size()];
+		 * server.worldServer[0] = (WorldServer) sender.getWorld(); int bpos =
+		 * 0; for (int pos = 1; pos < server.worldServer.length; pos++) {
+		 * WorldServer world = server.worlds.get(bpos++); if
+		 * (server.worldServer[0] == world) { pos--; continue; }
+		 * server.worldServer[pos] = world; }
+		 */// Svarka - no!
+		// try {
+		ArrayList<String[]> newCommands = new ArrayList<String[]>();
+		for (int i = 0; i < args.length; i++) {
+			if (EntitySelector.func_82378_b(args[i])) {
+				for (int j = 0; j < commands.size(); j++) {
+					newCommands.addAll(buildCommands(sender, commands.get(j), i));
+				}
+				ArrayList<String[]> temp = commands;
+				commands = newCommands;
+				newCommands = temp;
+				newCommands.clear();
+			}
+		}
+		// } finally { // Svarka
+		// MinecraftServer.getServerStatic().worldServer = prev;
+		// }
+
+		int completed = 0;
+
+		// Now dispatch all of the commands we ended up with
+		for (int i = 0; i < commands.size(); i++) {
+			try {
+				if (commandMap.dispatch(bSender, joiner.join(java.util.Arrays.asList(commands.get(i))))) {
+					completed++;
+				}
+			} catch (Throwable exception) {
+				if (sender.func_174793_f() instanceof EntityMinecartCommandBlock) {
+					MinecraftServer.getServerStatic().server.getLogger().log(Level.WARNING, String.format("MinecartCommandBlock at (%d,%d,%d) failed to handle command", sender.func_180425_c().func_177958_n(), sender.func_180425_c().func_177956_o(), sender.func_180425_c().func_177952_p()), exception);
+				} else if (sender instanceof CommandBlockBaseLogic) {
+					CommandBlockBaseLogic listener = (CommandBlockBaseLogic) sender;
+					MinecraftServer.getServerStatic().server.getLogger().log(Level.WARNING, String.format("CommandBlock at (%d,%d,%d) failed to handle command", listener.func_180425_c().func_177958_n(), listener.func_180425_c().func_177956_o(), listener.func_180425_c().func_177952_p()), exception);
+				} else {
+					MinecraftServer.getServerStatic().server.getLogger().log(Level.WARNING, String.format("Unknown CommandBlock failed to handle command"), exception);
+				}
+			}
+		}
+
+		return completed;
+	}
+
+	private static ArrayList<String[]> buildCommands(ICommandSender sender, String[] args, int pos) {
+		ArrayList<String[]> commands = new ArrayList<String[]>();
+		java.util.List<EntityPlayerMP> players = (java.util.List<EntityPlayerMP>) EntitySelector.func_179656_b(sender, args[pos], EntityPlayerMP.class);
+
+		if (players != null) {
+			for (EntityPlayerMP player : players) {
+				if (player.field_70170_p != sender.func_130014_f_()) {
+					continue;
+				}
+				String[] command = args.clone();
+				command[pos] = player.func_70005_c_();
+				commands.add(command);
+			}
+		}
+
+		return commands;
+	}
+
+	// CraftBukkit end
+
     public String func_70005_c_()
     {
         return this.field_145761_f;
