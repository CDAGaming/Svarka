--- ../src-base/minecraft/net/minecraft/server/network/NetHandlerHandshakeTCP.java
+++ ../src-work/minecraft/net/minecraft/server/network/NetHandlerHandshakeTCP.java
@@ -9,13 +9,28 @@
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.TextComponentString;
 
+
+import java.net.InetAddress;
+import java.util.HashMap;
+import java.util.Map.Entry;
+
+// CraftBukkit start
+import java.net.InetAddress;
+import java.util.HashMap;
+import java.util.Map.Entry;
+// CraftBukkit end
+
 public class NetHandlerHandshakeTCP implements INetHandlerHandshakeServer
 {
+	// CraftBukkit start - add fields
+	private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<InetAddress, Long>();
+	private static int throttleCounter = 0;
+	// CraftBukkit end
     private final MinecraftServer field_147387_a;
     private final NetworkManager field_147386_b;
 
     public NetHandlerHandshakeTCP(MinecraftServer p_i45295_1_, NetworkManager p_i45295_2_)
-    {
+    {	
         this.field_147387_a = p_i45295_1_;
         this.field_147386_b = p_i45295_2_;
     }
@@ -28,7 +43,43 @@
         {
             case LOGIN:
                 this.field_147386_b.func_150723_a(EnumConnectionState.LOGIN);
+                TextComponentString chatcomponenttext;
 
+                // CraftBukkit start - Connection throttle
+                try {
+                	long currentTime = System.currentTimeMillis();
+                	long connectionThrottle = MinecraftServer.getServerStatic().server.getConnectionThrottle();
+                	InetAddress address = ((java.net.InetSocketAddress) this.field_147386_b.func_74430_c()).getAddress();
+
+                	synchronized (throttleTracker) {
+                		if (throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - throttleTracker.get(address) < connectionThrottle) {
+                			throttleTracker.put(address, currentTime);
+                			chatcomponenttext = new TextComponentString("Connection throttled! Please wait before reconnecting.");
+                			this.field_147386_b.func_179290_a(new SPacketDisconnect(chatcomponenttext));
+                			this.field_147386_b.func_150718_a(chatcomponenttext);
+                			return;
+                		}
+
+                		throttleTracker.put(address, currentTime);
+                		throttleCounter++;
+                		if (throttleCounter > 200) {
+                			throttleCounter = 0;
+
+                			// Cleanup stale entries
+                			java.util.Iterator<Entry<InetAddress, Long>> iter = throttleTracker.entrySet().iterator();
+                			while (iter.hasNext()) {
+                				java.util.Map.Entry<InetAddress, Long> entry = iter.next();
+                				if (entry.getValue() > connectionThrottle) {
+                					iter.remove();
+                				}
+                			}
+                		}
+                	}
+                } catch (Throwable t) {
+                	org.apache.logging.log4j.LogManager.getLogger().debug("Failed to check connection throttle", t);
+                }
+                // CraftBukkit end
+                
                 if (p_147383_1_.func_149595_d() > 110)
                 {
                     TextComponentString textcomponentstring = new TextComponentString("Outdated server! I\'m still on 1.9.4");
@@ -44,6 +95,7 @@
                 else
                 {
                     this.field_147386_b.func_150719_a(new NetHandlerLoginServer(this.field_147387_a, this.field_147386_b));
+                    ((NetHandlerLoginServer)this.field_147386_b.func_150729_e()).hostname = p_147383_1_.field_149598_b + ":" + p_147383_1_.field_149599_c;
                 }
 
                 break;
